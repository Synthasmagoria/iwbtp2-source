// 2023-12-09 13:45:55
#event properties (no comments/etc. here are saved)
parent_index = -1;
sprite_index = sprP2Icon;
uses_physics = false;

#event create
enum P2_ENTRANCE_STATE {
    IDLE,
    CAPTURE,
    DRAW,
    NOT_RESPONDING,
    NOT_RESPONDING_WAIT,
    RESPONDING_AGAIN,
    OPEN_P2,
    FULLSCREEN_P2,
    START_P2,
    __MAX
}

image_speed = 1/2;

state = 0;
sprite = -1;
time = 0;
state_duration = array(-1, -1, 2, 0.75, random_range(4,7), 1, 2, 2/50, -1);
font = fP2SegoeUI10;
icon_name = "IWBTP2.exe";

// state specific variables
white_alpha = 0;
was_fullscreened = false;
caption = "";

#event destroy
window_set_cursor(cr_default);
application_surface_draw_enable(true);
if (sprite_exists(sprite)) {
    sprite_delete(sprite);
}

#event step
time += (1/50);

if (state_duration[state] != -1 && state_duration[state] <= time) {
    event_user(0);
}

#event collision:objPlayer
global.gameStarted = false;
event_user(0);

#event other_room_start
switch (room) {
    case rP2EntranceDemo:
        if (persistent) {
            instance_destroy();
        }
        break;
    case rP2MenuUnresponsive:
        break;
    default:
        instance_destroy();
}

#event other_room_end
if (!persistent) {
    instance_destroy();
}

#event other_user0 next state
if (state + 1 < P2_ENTRANCE_STATE.__MAX) {
    state++;
    time = 0;
    
    switch (state) {
        case P2_ENTRANCE_STATE.NOT_RESPONDING:
            was_fullscreened = window_get_fullscreen();
            window_set_fullscreen(false);
            window_set_cursor(cr_hourglass);
            caption = window_get_caption();
            if (audio_is_playing(global.currentMusicID)) {
                audio_stop_sound(global.currentMusicID);
                global.currentMusicID = -1;
                global.currentMusic = -1;
            }
            TweenFire(id, EaseLinear, 0, false, 0, state_duration[P2_ENTRANCE_STATE.NOT_RESPONDING] * 50, "white_alpha", 0.0, 0.5);
            persistent = true;
            break;
        
        case P2_ENTRANCE_STATE.RESPONDING_AGAIN:
            window_set_fullscreen(was_fullscreened);
            window_set_cursor(cr_default);
            white_alpha = 0.0;
            break;
        
        case P2_ENTRANCE_STATE.OPEN_P2:
            room_goto(rP2MenuUnresponsive);
            application_surface_draw_enable(false);
            break;
        
        case P2_ENTRANCE_STATE.START_P2:
            room_goto(rP2Menu);
            break;
    }
}

#event draw
if (state > P2_ENTRANCE_STATE.CAPTURE) {
    exit;
}

draw_self();

var
_sx = x + sprite_width / 2,
_sy = y + sprite_height + 4,
_sw = string_width(icon_name),
_sh = string_height(icon_name);

if (state != P2_ENTRANCE_STATE.IDLE) {
    draw_set_color(c_blue);
    draw_rectangle(_sx - _sw / 2, _sy, _sx + _sw / 2, _sy + _sh, false);
}

draw_set_font(font);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);
draw_text(_sx, _sy, icon_name);
draw_set_halign(fa_left);

#event draw_end
switch (state) {
    case P2_ENTRANCE_STATE.DRAW:
        draw_sprite(sprite, 0, 0, 0);
        break;
    
    case P2_ENTRANCE_STATE.NOT_RESPONDING:
    case P2_ENTRANCE_STATE.NOT_RESPONDING_WAIT:
        draw_sprite(sprite, 0, 0, 0);
        draw_sprite_stretched_ext(sprP2White32, 0, 0, 0, surface_get_width(application_surface), surface_get_height(application_surface), c_white, white_alpha);
        window_set_caption(caption + " [NOT REPONDING]");
        break;
    
    case P2_ENTRANCE_STATE.RESPONDING_AGAIN:
        draw_sprite(sprite, 0, 0, 0);
        break;
}

#event draw_post
switch (state) {
    case P2_ENTRANCE_STATE.CAPTURE:
        capture = false;
        event_user(0);
        instance_destroy(objPlayer);
        sprite = sprite_create_from_surface(application_surface, 0, 0, surface_get_width(application_surface), surface_get_height(application_surface), false, false, 0, 0);
        audio_play_sound(sndP2Navigation, 0, false);
        break;
    
    case P2_ENTRANCE_STATE.OPEN_P2:
        var _s = application_get_position();
        var _size = 0.6;
        draw_sprite_stretched(sprite, 0, _s[0], _s[1], _s[2] - _s[0], _s[3] - _s[1]);
        draw_surface_stretched(
            application_surface,
            _s[0] + ((_s[2] - _s[0]) * (1.0 - _size)) / 2,
            _s[1] + ((_s[3] - _s[1]) * (1.0 - _size)) / 2,
            _s[2] * _size,
            _s[3] * _size);
        break;
    
    case P2_ENTRANCE_STATE.FULLSCREEN_P2:
        draw_clear(c_white);
        break;
}