// 2024-06-30 17:06:04
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create
change_interval = 4;
change_start_x = floor(x / 32) - floor(view_xview[0] / 32);
change_start_y = floor(y / 32) - floor(view_yview[0] / 32);
change_tileset = tP2Forest;
change_tile_depth = 999998;
change_to_room = rP2ForestFinal;
change_other_solids_tile_depth = 999999;

change_radius = 0;
change_grid_width = floor(view_wview[0] / 32);
change_grid_height = floor(view_hview[0] / 32);
change_grid = ds_grid_create(change_grid_width, change_grid_height);
change_grid_prev = ds_grid_create(change_grid_width, change_grid_height);
change_duration = -1;

tree_height_check = 6;
tree_chance = 0.25;

event_user(0);

#event destroy
ds_grid_destroy(change_grid);
ds_grid_destroy(change_grid_prev);

#event alarm0
change_radius++;
ds_grid_add_disk(change_grid, change_start_x, change_start_y, change_radius, 1);

var
_world_x_start = (global.__p2_current_room_x + floor(view_xview[0] / view_wview[0])) * 25,
_world_y_start = (global.__p2_current_room_y + floor(view_yview[0] / view_hview[0])) * 19,
_world_tilemap_w = ds_grid_width(global.__p2_tilemap),
_world_tilemap_h = ds_grid_height(global.__p2_tilemap),
_td, _t;
for (var xx = 0; xx < change_grid_width; xx++) {
    for (var yy = 0; yy < change_grid_height; yy++) {
        _td = global.__p2_tilemap[#_world_x_start + xx, _world_y_start + yy];
        if (_td && change_grid[#xx, yy] && !change_grid_prev[#xx, yy] && tile_exists(_td[?"tile"])) {
            _t = _td[?"tile"];
            tile_add(change_tileset, 0, tile_get_top(_t), 32, 32, tile_get_x(_t), tile_get_y(_t), change_tile_depth);
            tile_set_visible(_t, false);
            tile_set_visible(_td[?"pipe_tile"], false);
        }
    }
}
ds_grid_copy(change_grid_prev, change_grid);
alarm[0] = change_interval;

#event alarm1
alarm[0] = -1;
alarm[1] = -1;

room_goto(change_to_room);

with (objPlayer) {
    x = x - view_xview[0] + view_wview[0];
    y = y - view_yview[0] + view_hview[0];
}


#event other_user0 init
alarm[0] = change_interval;

var _furthest_edge_x, _furthest_edge_y;
if (change_start_x * 32 < view_xview[0] + view_wview[0] / 2) {
    _furthest_edge_x = view_xview[0] + view_wview[0];
} else {
    _furthest_edge_x = view_xview[0];
}
if (change_start_y * 32 < view_yview[0] + view_hview[0] / 2) {
    _furthest_edge_y = view_yview[0] + view_hview[0];
} else {
    _furthest_edge_y = view_yview[0];
}
alarm[1] = change_interval * point_distance(change_start_x, change_start_y, ceil(_furthest_edge_x / 32), ceil(_furthest_edge_y / 32));

