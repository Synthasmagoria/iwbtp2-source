// 2024-06-24 16:16:29
#event properties (no comments/etc. here are saved)
parent_index = objP2Interactable;
sprite_index = sprP2WorldResetDevice;
uses_physics = false;

#event create
event_inherited();

image_index = 0;
image_speed = 0;
depth = 1000001;

once = true;
dismissible = false;
interaction_start_callback = scrP2WorldResetDevice_Interact;

sound_activate = sndP2WorldResetDevice_Activate;
sound_charge = sndP2WorldResetDevice_Charge;
sound_reset = sndP2WorldResetDevice_Reset;
sound_activate_inst = -1;
sound_charge_inst = -1;
sound_reset_inst = -1;

state = 0;
state_1_duration = 95;
circles_active = false;
circle_number = 0;
circle_index = 0;
circle_max = 128;
circle_radius = array_create(circle_max);
circle_interval = 64;
circle_xstart = x + sprite_width / 2;
circle_ystart = y + 10;
circle_grow_speed = 4;
circle_displace = 0;

circle_distortion_surface = -1;

pixel_number = 0;
pixel_index = 0;
pixel_interval = 3;
pixel_max = 128;
pixel_x = array_create(pixel_max);
pixel_y = array_create(pixel_max);
pixel_value_x = array_create(pixel_max);
pixel_value_y = array_create(pixel_max);
pixel_direction_x = array_create(pixel_max);
pixel_direction_y = array_create(pixel_max);
pixel_fall_speed = 0.3;

draw_set_circle_precision(32);

#event destroy
if (surface_exists(circle_distortion_surface)) {
    surface_free(circle_distortion_surface);
}

if (audio_is_playing(sound_activate_inst)) {
    audio_stop_sound(sound_activate_inst);
}

if (audio_is_playing(sound_charge_inst)) {
    audio_stop_sound(sound_charge_inst);
}

if (audio_is_playing(sound_reset_inst)) {
    audio_stop_sound(sound_reset_inst);
}

#event alarm0 create circle + state1 condition
if (circle_interval <= 3) {
    state = 1;
    alarm[0] = -1;
    alarm[1] = pixel_interval;
    alarm[2] = state_1_duration;
    
    if (audio_is_playing(sound_charge_inst)) {
        audio_stop_sound(sound_charge_inst);
    }
    sound_reset_inst = audio_play_sound(sound_reset, 0, false);
} else {
    if (circle_number == 0 && !audio_is_playing(sound_charge_inst)) {
        sound_charge_inst = audio_play_sound(sound_charge, 0, false);
    }
    
    circle_interval = circle_interval * 0.85;
    circle_radius[circle_number] = 0;
    circle_number = min(circle_number + 1, circle_max);
    circle_index = (circle_index + 1) % circle_max;
    alarm[0] = circle_interval;
}

#event alarm1 create pixel
pixel_x[pixel_index] = irandom(view_wview[0]);
pixel_y[pixel_index] = irandom(view_hview[0]);
pixel_value_x[pixel_index] = irandom(255);
pixel_value_y[pixel_index] = irandom(255);
var _dir = point_direction(view_wview[0] / 2, view_hview[0] / 2, pixel_x[pixel_index], pixel_y[pixel_index]);
pixel_direction_x[pixel_index] = lengthdir_x(1, _dir);
pixel_direction_y[pixel_index] = lengthdir_y(1, _dir);
pixel_number = min(pixel_number + 1, pixel_max);
pixel_index = (pixel_index + 1) % pixel_max;
alarm[1] = ceil(pixel_interval * power(1 - alarm[2] / state_1_duration, 2));

#event alarm2 reset world
scrP2WorldCollectData(false);

#event step
event_inherited();

switch (state) {
    case 0:
    for (var i = 0; i < circle_number; i++) {
        circle_radius[i] += circle_grow_speed;
    }
    break;
    
    case 1:
    pixel_fall_speed += 0.2;
    for (var i = 0; i < pixel_number; i++) {
        pixel_x[i] += pixel_direction_x[i] * pixel_fall_speed;
        pixel_y[i] += pixel_direction_y[i] * pixel_fall_speed;
    }
    circle_displace += 1;
    break;
}

#event other_room_end
instance_destroy();

#event other_animation_end
image_index = 0;
image_speed = 0;

#event other_user0
image_speed = 0.25;
alarm[0] = circle_interval;
sound_activate_inst = audio_play_sound(sound_activate, 0, false);

#event draw
draw_self();

#event draw_end
switch (state) {
    case 0:
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    for (var i = 0; i < circle_number; i++) {
        draw_circle(circle_xstart, circle_ystart, circle_radius[i], true);
    }
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    break;
    
    case 1:
    var
    _cx = circle_xstart - view_xview[0],
    _cy = circle_ystart - view_yview[0];
    
    if (!surface_exists(circle_distortion_surface)) {
        circle_distortion_surface = surface_create(view_wview[0], view_hview[0]);
        surface_set_target(circle_distortion_surface);
        draw_clear_alpha(c_black, 0.0);
        draw_set_color(c_white);
        for (var i = 0; i < circle_number; i++) {
            draw_circle(_cx, _cy, circle_radius[i], true);
        }
        surface_reset_target();
        
        surface_set_target(circle_distortion_surface);
        shader_set(shP2DrawSamplePositions);
        draw_surface(circle_distortion_surface, 0, 0);
        shader_reset();
        surface_reset_target();
    }
    
    surface_set_target(circle_distortion_surface);
    draw_surface(circle_distortion_surface, 1, 0);
    for (var i = 0; i < pixel_number; i++) {
        draw_set_color(make_color_rgb(pixel_value_x[i], pixel_value_y[i], 0));
        draw_rectangle(pixel_x[i], pixel_y[i], pixel_x[i] + 4, pixel_y[i] + 4, false);
    }
    surface_reset_target();
    
    shader_set(shP2SampleAtRG);
    texture_set_stage(shader_get_sampler_index(shP2SampleAtRG, "sample_texture"), surface_get_texture(circle_distortion_surface));
    var _backbuffer_surface = scrP2WorldRequestBackbuffer();
    draw_surface(_backbuffer_surface, view_xview[0], view_yview[0]);
    shader_reset();
    
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    for (var i = 0; i < circle_number; i++) {
        draw_circle(_cx + circle_displace, _cy, circle_radius[i], true);
    }
    draw_set_alpha(1.0);
    break;
}
