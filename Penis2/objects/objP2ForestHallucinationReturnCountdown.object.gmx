<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distance_measurer = instance_find(objP2ForestDistanceMeasurement, 0);

speedup_range = 800;
speedup_factor = 8.0;

timer = 0.0;
timer_duration = 36.0;
return_x = 0;
return_y = 0;
return_room = rP2WrenchTutorial;
return_room_song = musP2WrenchTutorial;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_measurer.distance_from_middle &gt; speedup_range) {
    timer += (1/room_speed) * speedup_factor;
} else {
    timer += (1/room_speed);
}

if (timer &gt;= timer_duration) {
    room_goto(return_room);
    var _player = instance_find(objPlayer, 0);
    if (_player == noone) {
        _player = instance_create(0, 0, objPlayer);
    }
    
    _player.x = return_x;
    _player.y = return_y;
    
    if (audio_is_playing(global.currentMusic)) {
        audio_stop_sound(global.currentMusic);
    }
    if (!global.muteMusic) {
        global.currentMusic = audio_play_sound(return_room_song, 0, true);
        audio_sound_set_track_position(global.currentMusic, random_range(5.0, audio_sound_length(return_room_song) - 5.0));
        global.currentMusicID = musP2WrenchTutorial;
    }
    
    instance_create(0, 0, objP2WrapIndicator);
    
    global.gameStarted = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
