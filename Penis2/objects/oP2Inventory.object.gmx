<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
items = ds_list_create();
unlocked_items = ds_list_create();
item_slots = P2_ITEM.__NUMBER;
margin = 4;
size = 48;
size_init = size;
dim = 0.75;
font = fP2Silver16;
text_yoffset = 4;
text_xoffset = 2;
text_margin = 4;
minimized = false;
item_activation_sound = sndP2ItemActivation;
item_activation_sound_inst = -1;

draw_set_font(font);
char_width = string_width("A");
// NOTE: This doesn't make sense. Silver font just has a lot of free horizontal space
char_height = string_height("A") / 2;

ds_list_add_map(
    items, 
    scrP2InventoryItemCreate(
        0,
        "Dev",
        sprP2Wrench,
        -sprite_get_width(sprP2Wrench) / 2,
        -sprite_get_height(sprP2Wrench) / 2,
        -1,
        -1,
        -1,
        -1));
ds_list_add_map(
    items,
    scrP2InventoryItemCreate(
        1,
        "Home",
        sprP2WarpOrb,
        0,
        0,
        scrP2WarpHome,
        2,
        scrP2WarpIsAvailable,
        ord("W")));
ds_list_add_map(
    items,
    scrP2InventoryItemCreate(
        3,
        sP2WorldBorderDetector,
        "WBD",
        -sprite_get_width(sP2WorldBorderDetector) / 2,
        -sprite_get_height(sP2WorldBorderDetector) / 2,
        -1,
        -1,
        -1,
        -1));

event_user(0);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(items);
ds_list_destroy(unlocked_items);

if (audio_is_playing(item_activation_sound_inst)) {
    audio_stop_sound(item_activation_sound_inst);
    item_activation_sound_inst = -1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var _item, _hold_prev, _just_used;
for (var i = 0, n = ds_list_size(unlocked_items); i &lt; n; i++) {
    _item = items[|unlocked_items[|i]];
    _item[?"_input_indicator_alpha"] = max(_item[?"_input_indicator_alpha"] - 0.02, 0.0);
    _hold_prev = _item[?"_hold"];
    _item[?"_just_used"] *= !keyboard_check_released(_item[?"usage_button"]);
    _just_used = _item[?"_just_used"];
    
    if (keyboard_check(_item[?"usage_button"]) &amp;&amp;
        script_exists(_item[?"action_script"]) &amp;&amp;
        (!script_exists(_item[?"usage_condition"]) || script_execute(_item[?"usage_condition"])) &amp;&amp;
        !_just_used) {
        _item[?"_hold"] = min(_item[?"hold_duration"], _item[?"_hold"] + (1/room_speed));
    } else {
        _item[?"_hold"] = 0.0;
    }
    
    if (_hold_prev &lt; _item[?"_hold"] &amp;&amp; !audio_is_playing(item_activation_sound_inst)) {
        item_activation_sound_inst = audio_play_sound(item_activation_sound, 0, true);
    } else if (_hold_prev &gt; _item[?"_hold"] &amp;&amp; audio_is_playing(item_activation_sound_inst)) {
        audio_stop_sound(item_activation_sound_inst);
        item_activation_sound_inst = -1;
        if (!_just_used) {
            audio_play_sound(sndP2ItemAbort, 0, false);
        }
    }
    
    if (!_just_used &amp;&amp; 
        script_exists(_item[?"action_script"]) &amp;&amp;
        _hold_prev &lt; _item[?"hold_duration"] &amp;&amp;
        _item[?"_hold"] &gt;= _item[?"hold_duration"]) {
        
        _item[?"_hold"] = 0.0;
        _item[?"_input_indicator_alpha"] = 1.0;
        _item[?"_just_used"] = true;
        script_execute(_item[?"action_script"]);
        
        if (audio_is_playing(item_activation_sound_inst)) {
            audio_stop_sound(item_activation_sound_inst);
            item_activation_sound_inst = -1;
        }
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update unlocked items
ds_list_clear(unlocked_items);
for (var i = 0; i &lt; P2_ITEM.__NUMBER; i++) {
    if (int_get_bit(global.p2Item, i)) {
        ds_list_add(unlocked_items, i);
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// NOTE: Can be put on a surface if laggy
var
_y1 = margin,
_y2 = _y1 + size;

draw_set_font(font);

var _x1, _x2;
for (var i = 0; i &lt; item_slots; i++) {
    _x1 = margin + (size + margin) * i;
    _x2 = _x1 + size;

    draw_set_alpha(dim * image_alpha);
    draw_set_color(c_black);
    draw_rectangle(_x1, _y1, _x2, _y2, false);
    draw_set_color(c_white);
    draw_set_alpha(image_alpha);
    draw_rectangle(_x1, _y1, _x2, _y2, true);
}

var _item, _xmid, _ymid, _sw, _tbx1, _tbx2,
_tby1 = _y2 - char_height / 2 - text_margin,
_tby2 = _y2 + char_height / 2 + text_margin,
item_scale = size / size_init;
for (var i = 0, n = ds_list_size(unlocked_items); i &lt; n; i++) {
    _item = items[|unlocked_items[|i]];
    _x1 = margin + (size + margin) * _item[?"slot_index"];
    _x2 = _x1 + size;
    draw_set_color(c_white);
    if (_item[?"hold_duration"] &gt; 0) {
    draw_set_alpha(0.5);
    draw_rectangle(
        _x1,
        _y1,
        _x1 + (_x2 - _x1) * (_item[?"_hold"] / max(_item[?"hold_duration"], (1/50))),
        _y2,
        false);
    }
    draw_set_alpha(_item[?"_input_indicator_alpha"] * image_alpha);
    draw_set_blend_mode(bm_add);
    draw_rectangle(_x1, _y1, _x2, _y2, false);
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(image_alpha);
    
    _xmid = lerp(_x1, _x2, 0.5); _ymid = lerp(_y1, _y2, 0.5);
    draw_sprite_ext(
        _item[?"sprite_index"],
        0,
        _xmid + (item_scale * _item[?"sprite_xoffset"]),
        _ymid + (item_scale * _item[?"sprite_yoffset"]),
        item_scale,
        item_scale,
        0,
        lerp(c_white, c_red, _item[?"usage_condition"] != -1 &amp;&amp; !script_execute(_item[?"usage_condition"])),
        image_alpha);
    
    if (!minimized) {
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        if (_item[?"usage_button"] != -1) {
            var _key = scrGetKeybind(_item[?"usage_button"]);
            draw_set_color(c_black);
            draw_text(_x1 + margin + 1, _y1 + 1, _key);
            draw_set_color(c_white);
            draw_text(_x1 + margin, _y1, _key);
        }
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        _sw = string_length(_item[?"name"]) * char_width;
        _tbx1 = _xmid - _sw / 2 - text_margin;
        _tbx2 = _xmid + _sw / 2 + text_margin;
        draw_set_color(c_black);
        draw_rectangle(_tbx1, _tby1, _tbx2, _tby2, false);
        draw_set_color(c_white);
        draw_rectangle(_tbx1, _tby1, _tbx2, _tby2, true);
        draw_set_color(c_black);
        draw_text(_xmid + 1 + text_xoffset, _y2 + 1 + text_yoffset, _item[?"name"]);
        draw_set_color(c_white);
        draw_text(_xmid + text_xoffset, _y2 + text_yoffset, _item[?"name"]);
    }
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
