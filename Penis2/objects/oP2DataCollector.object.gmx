<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>load_file = true;

room_index = 0;
room_list = ds_list_create();
tile_depth = -1;
tileset = -1;
world_width = -1;
world_height = -1;

start_room = room;
start_player_x = -1;
start_player_y = -1;

is_collecting_data = false;

muted_before = global.muteMusic;
global.muteMusic = true;

excluded_tile_alpha = ds_list_create();
excluded_tile_background = ds_list_create();
excluded_tile_blend = ds_list_create();
excluded_tile_depth = ds_list_create();
excluded_tile_height = ds_list_create();
excluded_tile_width = ds_list_create();
excluded_tile_left = ds_list_create();
excluded_tile_top = ds_list_create();
excluded_tile_x = ds_list_create();
excluded_tile_y = ds_list_create();
excluded_tile_xscale = ds_list_create();
excluded_tile_yscale = ds_list_create();
excluded_tile_visible = ds_list_create();

included_tile_alpha = ds_list_create();
included_tile_background = ds_list_create();
included_tile_blend = ds_list_create();
included_tile_depth = ds_list_create();
included_tile_height = ds_list_create();
included_tile_width = ds_list_create();
included_tile_left = ds_list_create();
included_tile_top = ds_list_create();
included_tile_x = ds_list_create();
included_tile_y = ds_list_create();
included_tile_xscale = ds_list_create();
included_tile_yscale = ds_list_create();
included_tile_visible = ds_list_create();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.muteMusic = muted_before;

ds_list_destroy(room_list);

ds_list_destroy(excluded_tile_alpha);
ds_list_destroy(excluded_tile_background);
ds_list_destroy(excluded_tile_blend);
ds_list_destroy(excluded_tile_depth);
ds_list_destroy(excluded_tile_height);
ds_list_destroy(excluded_tile_width);
ds_list_destroy(excluded_tile_left);
ds_list_destroy(excluded_tile_top);
ds_list_destroy(excluded_tile_x);
ds_list_destroy(excluded_tile_y);
ds_list_destroy(excluded_tile_xscale);
ds_list_destroy(excluded_tile_yscale);
ds_list_destroy(excluded_tile_visible);
    
ds_list_destroy(included_tile_alpha);
ds_list_destroy(included_tile_background);
ds_list_destroy(included_tile_blend);
ds_list_destroy(included_tile_depth);
ds_list_destroy(included_tile_height);
ds_list_destroy(included_tile_width);
ds_list_destroy(included_tile_left);
ds_list_destroy(included_tile_top);
ds_list_destroy(included_tile_x);
ds_list_destroy(included_tile_y);
ds_list_destroy(included_tile_xscale);
ds_list_destroy(included_tile_yscale);
ds_list_destroy(included_tile_visible);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add collected tiles to previous room
var _t;

if (room_index != 0) {
    var _prev_room = room_list[|room_index - 1];
    
    room_tile_clear(_prev_room);
    for (var i = 0, n = ds_list_size(excluded_tile_alpha); i &lt; n; i++) {
        room_tile_add_ext(
            _prev_room,
            excluded_tile_background[|i],
            excluded_tile_left[|i],
            excluded_tile_top[|i],
            excluded_tile_width[|i],
            excluded_tile_height[|i],
            excluded_tile_x[|i],
            excluded_tile_y[|i],
            excluded_tile_depth[|i],
            excluded_tile_xscale[|i],
            excluded_tile_yscale[|i],
            excluded_tile_alpha[|i]);
        // NOTE: I'm not able to set the visible attribute because the tile is in another room
    }
    
    ds_list_clear(excluded_tile_alpha);
    ds_list_clear(excluded_tile_background);
    ds_list_clear(excluded_tile_blend);
    ds_list_clear(excluded_tile_depth);
    ds_list_clear(excluded_tile_height);
    ds_list_clear(excluded_tile_width);
    ds_list_clear(excluded_tile_left);
    ds_list_clear(excluded_tile_top);
    ds_list_clear(excluded_tile_x);
    ds_list_clear(excluded_tile_y);
    ds_list_clear(excluded_tile_xscale);
    ds_list_clear(excluded_tile_yscale);
    ds_list_clear(excluded_tile_visible);
    
    for (var i = 0, n = ds_list_size(included_tile_alpha); i &lt; n; i++) {
        room_tile_add_ext(
            _prev_room,
            included_tile_background[|i],
            included_tile_left[|i],
            included_tile_top[|i],
            included_tile_width[|i],
            included_tile_height[|i],
            included_tile_x[|i],
            included_tile_y[|i],
            included_tile_depth[|i],
            included_tile_xscale[|i],
            included_tile_yscale[|i],
            0.0);
    }
    
    ds_list_clear(included_tile_alpha);
    ds_list_clear(included_tile_background);
    ds_list_clear(included_tile_blend);
    ds_list_clear(included_tile_depth);
    ds_list_clear(included_tile_height);
    ds_list_clear(included_tile_width);
    ds_list_clear(included_tile_left);
    ds_list_clear(included_tile_top);
    ds_list_clear(included_tile_x);
    ds_list_clear(included_tile_y);
    ds_list_clear(included_tile_xscale);
    ds_list_clear(included_tile_yscale);
    ds_list_clear(included_tile_visible);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_room = room;
with (objPlayer) {
    other.start_player_x = x;
    other.start_player_y = y;
}

is_collecting_data = true;
// TODO: Consider running through all rooms once in order to collect the final size of the grid
if (ds_exists(global.__p2_tilemap, ds_type_grid))
    ds_grid_destroy(global.__p2_tilemap);
global.__p2_tilemap = ds_grid_create(25 * world_width, 19 * world_height);
ds_grid_clear(global.__p2_tilemap, -1);
// NOTE: Currently only exists so that the maps in the grid can easily be freed from memory
if (ds_exists(global.__p2_room_tiles, ds_type_map))
    ds_map_destroy(global.__p2_room_tiles);
global.__p2_room_tiles = scrSynthIterMapCreate();

room_index = 0;
room_goto(room_list[|room_index]);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(objPlayer);

if (!is_collecting_data) {
    // TODO: This will fail if the starting room is the previous room
    event_user(1);
    if (load_file)
        scrP2LoadData();
    room_goto(start_room);
    if (start_player_x != -1 || start_player_y != -1) {
        instance_create(start_player_x, start_player_y, objPlayer);
    }
    instance_destroy();
    exit;
}

event_user(1);

var
_tiles = tile_get_ids(),
_tileset_width = background_get_width(tileset) / __P2_TILE_SIZE,
_rx = global.__p2_current_room_x * 800,
_ry = global.__p2_current_room_y * 608,
_txoff = _rx / __P2_TILE_SIZE,
_tyoff = _ry / __P2_TILE_SIZE,
_tile_list = ds_list_create(),
_t, _tx, _ty, _ti, _td;

scrSynthIterMapAddList(global.__p2_room_tiles, room_get_name(room), _tile_list);

for (var i = 0, n = array_length_1d(_tiles); i &lt; n; i++) {
    _t = _tiles[i];
    if (tile_get_depth(_t) == tile_depth &amp;&amp; tile_get_background(_t) == tileset) {
        _tx = tile_get_x(_t);
        _ty = tile_get_y(_t);
        _ti = tile_get_left(_t) / __P2_TILE_SIZE + tile_get_top(_t) / __P2_TILE_SIZE * _tileset_width;
        _td = scrP2TiledataCreate(_tx + _rx, _ty + _ry, _tx, _ty, _ti + irandom(_tileset_width - 1), scrP2TileGetWallBits(_t), false);
        // TODO: Tiles misaligned on the 32px grid could cause a memory leak or worse. Address this
        global.__p2_tilemap[#_tx / __P2_TILE_SIZE + _txoff, _ty / __P2_TILE_SIZE + _tyoff] = _td;
        ds_list_add_map(_tile_list, _td);
        
        ds_list_add(included_tile_alpha, tile_get_alpha(_t));
        ds_list_add(included_tile_background, tile_get_background(_t));
        ds_list_add(included_tile_blend, tile_get_blend(_t));
        ds_list_add(included_tile_depth, tile_get_depth(_t));
        ds_list_add(included_tile_height, tile_get_height(_t));
        ds_list_add(included_tile_width, tile_get_width(_t));
        ds_list_add(included_tile_left, tile_get_left(_t));
        ds_list_add(included_tile_top, tile_get_top(_t));
        ds_list_add(included_tile_x, tile_get_x(_t));
        ds_list_add(included_tile_y, tile_get_y(_t));
        ds_list_add(included_tile_xscale, tile_get_xscale(_t));
        ds_list_add(included_tile_yscale, tile_get_yscale(_t));
        ds_list_add(included_tile_visible, tile_get_visible(_t));
    } else {
        ds_list_add(excluded_tile_alpha, tile_get_alpha(_t));
        ds_list_add(excluded_tile_background, tile_get_background(_t));
        ds_list_add(excluded_tile_blend, tile_get_blend(_t));
        ds_list_add(excluded_tile_depth, tile_get_depth(_t));
        ds_list_add(excluded_tile_height, tile_get_height(_t));
        ds_list_add(excluded_tile_width, tile_get_width(_t));
        ds_list_add(excluded_tile_left, tile_get_left(_t));
        ds_list_add(excluded_tile_top, tile_get_top(_t));
        ds_list_add(excluded_tile_x, tile_get_x(_t));
        ds_list_add(excluded_tile_y, tile_get_y(_t));
        ds_list_add(excluded_tile_xscale, tile_get_xscale(_t));
        ds_list_add(excluded_tile_yscale, tile_get_yscale(_t));
        ds_list_add(excluded_tile_visible, tile_get_visible(_t));
    }
}

room_index++;
if (room_index &lt; ds_list_size(room_list)) {
    room_goto(room_list[|room_index]);
} else {
    is_collecting_data = false;
    room_goto(rP2FinalizeDataCollection);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_rectangle(0, 0, 1600, 1600, false);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
