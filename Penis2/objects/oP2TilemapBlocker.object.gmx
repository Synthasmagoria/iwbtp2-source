<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum P2_TILE_TYPE {
    NOTHING,
    FILLING,
    BLOCK,
    VERTICAL,
    HORIZONTAL
}

enum P2_DIRECTION {
    RIGHT,
    UP, 
    LEFT,
    DOWN
}

enum P2_WALLS {NONE, R, U, RU, L, RL, UL, RUL, D, RD, UD, RUD, LD, RLD, ULD, RULD}

non_corrupted_room_tiles = ds_list_create();

simple_tiles_only = false;
outside_tiles_left = true;
outside_tiles_right = true;
outside_tiles_top = true;
outside_tiles_bottom = true;

pipes_tile_depth = 1100000;
tileset = tPenis2Tileset;
tile_depth = 1000000;
tileset_width = background_get_width(tileset) / __P2_TILE_SIZE;
tile_alpha = 1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _touching_tile_area = false;
with (objPlayer)
    _touching_tile_area = place_meeting(x, y, oP2TileArea);

tile_alpha = clamp(
    tile_alpha + sign((1.0 - _touching_tile_area) - 0.5) * 0.02 * int_get_bit(global.p2Item, P2_ITEM.WRENCH),
    0.0,
    1.0);

var _td;
for (var i = 0, n = ds_list_size(non_corrupted_room_tiles); i &lt; n; i++) {
    _td = non_corrupted_room_tiles[|i];
    tile_set_alpha(_td[?"tile"], tile_alpha);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var
_world = instance_find(oP2World, 0),
_pipe_47_tileset = _world.pipe_47_tileset,
_td, _tx, _ty;
if (int_get_bit(global.saveP2Item, P2_ITEM.WRENCH)) {
    with (oP2CorruptionSetter) {
        _tx = floor(x / __P2_TILE_SIZE);
        _ty = floor(y / __P2_TILE_SIZE);
        if (scrP2TilemapPositionInRoom(_tx, _ty)) {
            scrP2TilemapTileCorruptInRoom(_tx, _ty);
        }
    }
}

ds_list_clear(non_corrupted_room_tiles);

if (!simple_tiles_only) {
    for (var i = 0, n = scrP2TilemapNumber(room); i &lt; n; i++) {
        _td = scrP2TilemapRoomGetFromIndex(i);
        scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _td[?"tile_x"], _td[?"tile_y"], _pipe_47_tileset);
        instance_create(_td[?"tile_x"], _td[?"tile_y"], oP2TileArea);
        if (!_td[?"corruption"]) {
            ds_list_add(non_corrupted_room_tiles, _td);
        }
    }
} else {
    for (var i = 0, n = scrP2TilemapNumber(room); i &lt; n; i++) {
        _td = scrP2TilemapRoomGetFromIndex(i);
        scrP2TileblockerInternal_TileAddFromTiledataAt_TileOnly(_td, _td[?"tile_x"], _td[?"tile_y"], _pipe_47_tileset);
    }
}

var _touching_tile_area = false;
with (objPlayer) {
    _touching_tile_area = place_meeting(x, y, oP2TileArea);
}
if (_touching_tile_area) {
    tile_alpha = 0.0;
}

var
_tx2 = room_width / __P2_TILE_SIZE,
_ty2 = room_height / __P2_TILE_SIZE;

if (outside_tiles_top) {
    for (var _tx = 0; _tx &lt; _tx2; _tx++) {
        _td = scrP2TilemapGetInRoom(_tx, -1);
        if (_td != -1) {
            scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _tx * __P2_TILE_SIZE, -__P2_TILE_SIZE, _pipe_47_tileset);
        }
    }
}
if (outside_tiles_bottom) {
    for (var _tx = 0; _tx &lt; _tx2; _tx++) {
        _td = scrP2TilemapGetInRoom(_tx, _ty2);
        if (_td != -1) {
            scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _tx * __P2_TILE_SIZE, _ty2 * __P2_TILE_SIZE, _pipe_47_tileset);
        }
    }
}
if (outside_tiles_left) {
    for (var _ty = 0; _ty &lt; _ty2; _ty++) {
        _td = scrP2TilemapGetInRoom(-1, _ty);
        if (_td != -1) {
            scrP2TileblockerInternal_TileAddFromTiledataAt(_td, -__P2_TILE_SIZE, _ty * __P2_TILE_SIZE, _pipe_47_tileset);
        }
    }
}
if (outside_tiles_right) {
    for (var _ty = 0; _ty &lt; _ty2; _ty++) {
        _td = scrP2TilemapGetInRoom(_tx2, _ty);
        if (_td != -1) {
            scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _tx2 * __P2_TILE_SIZE, _ty * __P2_TILE_SIZE, _pipe_47_tileset);
        }
    }
}

if (outside_tiles_top || outside_tiles_left) {
    _td = scrP2TilemapGetInRoom(-1, -1);
    if (_td != -1) {
        scrP2TileblockerInternal_TileAddFromTiledataAt(_td, -__P2_TILE_SIZE, -__P2_TILE_SIZE, _pipe_47_tileset);
    }
}
if (outside_tiles_left || outside_tiles_bottom) {
    _td = scrP2TilemapGetInRoom(-1, _ty2);
    if (_td != -1) {
        scrP2TileblockerInternal_TileAddFromTiledataAt(_td, -__P2_TILE_SIZE, _ty2 * __P2_TILE_SIZE, _pipe_47_tileset);
    }
}
if (outside_tiles_bottom || outside_tiles_right) {
    _td = scrP2TilemapGetInRoom(_tx2, _ty2);
    if (_td != -1) {
        scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _tx2 * __P2_TILE_SIZE, _ty2 * __P2_TILE_SIZE, _pipe_47_tileset);
    }
}
if (outside_tiles_right || outside_tiles_top) {
    _td = scrP2TilemapGetInRoom(_tx2, -1);
    if (_td != -1) {
        scrP2TileblockerInternal_TileAddFromTiledataAt(_td, _tx2 * __P2_TILE_SIZE, -__P2_TILE_SIZE, _pipe_47_tileset);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
