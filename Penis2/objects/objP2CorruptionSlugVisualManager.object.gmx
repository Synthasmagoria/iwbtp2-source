<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -1;
sh = shP2CorruptionSlug;
sh_post = shP2CorruptionSlugPost;
uvs = sprite_get_uvs(object_get_sprite(objP2CorruptionSlugVisualized), 0);
noise_texture = sprite_get_texture(sprP2DirectionalNoise, 0);
noise_uvs = sprite_get_uvs(sprP2DirectionalNoise, 0);
time = 0;
depth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf)) {
    surface_free(surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _world = instance_find(oP2World, 0);
with (objP2CorruptionSlug) {
    if (roomwrap) {
        instance_destroy();
    } else {
        if (persistent) {
            x -= (global.__p2_current_room_x - _world.previous_room_x) * view_wview[0];
            y -= (global.__p2_current_room_y - _world.previous_room_y) * view_hview[0];
            visual_instance.x -= (global.__p2_current_room_x - _world.previous_room_x) * view_wview[0];
            visual_instance.y -= (global.__p2_current_room_y - _world.previous_room_y) * view_hview[0];
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!surface_exists(surf)) {
    surf = surface_create(view_wview[0], view_hview[0]);
}

surface_set_target(surf);
draw_clear_alpha(c_black, 0.0);
draw_set_blend_mode(bm_add);
shader_set(sh);
shader_set_uniform_f(shader_get_uniform(sh, "uv_tl"), uvs[0], uvs[1]);
shader_set_uniform_f(shader_get_uniform(sh, "uv_br"), uvs[2], uvs[3]);

with (objP2CorruptionSlugVisualized) {
    shader_set_uniform_f(shader_get_uniform(other.sh, "time"), wiggle_time);
    shader_set_uniform_f(shader_get_uniform(other.sh, "frequency"), wiggle_frequency);
    shader_set_uniform_f(shader_get_uniform(other.sh, "amplitude"), wiggle_amplitude);
    draw_sprite_ext(
        sprite_index,
        image_index,
        x - view_xview[0],
        y - view_yview[0],
        image_xscale,
        image_yscale,
        image_angle,
        image_blend,
        image_alpha);
}
 
shader_reset();
draw_set_blend_mode(bm_normal);
surface_reset_target();

time += 1/50;

var _world = instance_find(oP2World, 0), _bb_texture = -1;
if (_world &amp;&amp; surface_exists(_world.backbuffer))
    _bb_texture = surface_get_texture(scrP2WorldRequestBackbuffer());
shader_set(sh_post);
if (_bb_texture != -1)
    texture_set_stage(shader_get_sampler_index(sh_post, "backbuffer"), _bb_texture);
shader_set_uniform_f(shader_get_uniform(sh_post, "noise_tl"), noise_uvs[0], noise_uvs[1]);
shader_set_uniform_f(shader_get_uniform(sh_post, "noise_br"), noise_uvs[2], noise_uvs[3]);
shader_set_uniform_f(shader_get_uniform(sh_post, "time"), time);
texture_set_stage(shader_get_sampler_index(sh_post, "noise_tex"), noise_texture);
draw_surface(surf, view_xview[0], view_yview[0]);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
