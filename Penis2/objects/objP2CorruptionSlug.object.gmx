<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprP2BlankCentered</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tileset = tPenis2Tileset;
tileset_width = -1;

tile_depth = 1000000;
tile_index_max = 20;
tile_index_min = 4;
tile_index_shift = 4;

tail_x = 0;
tail_y = 0;

lifetime = 0;
frequency = 1.0;
initialized = false;

visual_instance = noone;

movement_pattern_x = array(1, 1, 1);
movement_pattern_y = array(0, 0, 1);
movement_direction_x_norm = 0;
movement_direction_y_norm = 0;
movement_index = 0;
movement_pattern_length = 0;
movement_interval = (1/50) * (5.8 + random(1));
movement_timer = 0;

corruption_interval = (1/50) * 4;
corruption_timer = 0;
corruption_length = 4;

image_angle = 0;

roomwrap = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(visual_instance))
    instance_destroy(visual_instance);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
lifetime += (1/50);

movement_timer += (1/50);
if (movement_timer &gt;= movement_interval &amp;&amp; movement_interval &gt; 0)
{
    movement_timer -= movement_interval;
    
    x += __P2_TILE_SIZE * movement_pattern_x[movement_index];
    y += __P2_TILE_SIZE * movement_pattern_y[movement_index];
    
    movement_index = (movement_index + 1) % movement_pattern_length;

    //checks for if slug head/tail is inside room, if not, destroy
    //head check &amp; tail check
    if (!point_in_rectangle(x + 1, y + 1, 0, 0, room_width, room_height) &amp;&amp;
        !point_in_rectangle(tail_x + 1, tail_y + 1, 0, 0, room_width, room_height))
    {
        if (roomwrap)
        {
            x -= floor(x / room_width) * room_width;
            y -= floor(y / room_height) * room_height;
        }
        else
        {
            instance_destroy();
        }
    }
}

corruption_timer += (1/50);

if (corruption_timer &gt;= corruption_interval)
{
    corruption_timer -= corruption_interval;
    
    var
    _tmx = x,
    _tmy = y,
    _mi = movement_index,
    _world = instance_find(oP2World, 0),
    _pipe_47_tileset = _world.pipe_47_tileset,
    _tx, _ty, _td, _prev_tile_type, _tile_type;
    
    for (var i = 0; i &lt; corruption_length; i++)
    {
        _tx = floor(_tmx / __P2_TILE_SIZE);
        _ty = floor(_tmy / __P2_TILE_SIZE);
        _td = scrP2TilemapGetInRoom(_tx, _ty);
        
        if (_td != -1) {
            _prev_tile_type = scrP2MainTilesetGetTileType(_td[?"tile_index"]);
            _td[?"tile_index"] = ((_td[?"tile_index"] - tile_index_min + tile_index_shift) % (tile_index_max - tile_index_min)) + tile_index_min;
            scrP2TileRoomUpdateAt(_tx, _ty, _pipe_47_tileset);
            
            if (_prev_tile_type == P2_TILE_TYPE.HORIZONTAL) {
                scrP2TileRoomUpdateAt(_tx + 1, _ty, _pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx - 1, _ty, _pipe_47_tileset);
            } else if (_prev_tile_type == P2_TILE_TYPE.VERTICAL) {
                scrP2TileRoomUpdateAt(_tx, _ty + 1, _pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx, _ty - 1, _pipe_47_tileset);
            }
            
            _tile_type = scrP2MainTilesetGetTileType(_td[?"tile_index"]);
            if (_tile_type == P2_TILE_TYPE.HORIZONTAL) {
                scrP2TileRoomUpdateAt(_tx + 1, _ty, _pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx - 1, _ty, _pipe_47_tileset);
            } else if (_tile_type == P2_TILE_TYPE.VERTICAL) {
                scrP2TileRoomUpdateAt(_tx, _ty + 1, _pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx, _ty - 1, _pipe_47_tileset);
            }
        }
        
        if (i == corruption_length - 1)
        {
            tail_x = _tmx;
            tail_y = _tmy;
        }
        
        _mi--;
        if (_mi &lt; 0)
            _mi += movement_pattern_length;
        
        _tmx -= movement_pattern_x[_mi] * __P2_TILE_SIZE;
        _tmy -= movement_pattern_y[_mi] * __P2_TILE_SIZE;
        
        _tmx -= floor(_tmx / room_width) * room_width * roomwrap;
        _tmy -= floor(_tmy / room_height) * room_height * roomwrap;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
if (initialized) {
    exit;
}
initialized = true;

tileset_width = floor(background_get_width(tileset) / __P2_TILE_SIZE);
movement_pattern_length = array_length_1d(movement_pattern_x);
x = floor(x / __P2_TILE_SIZE) * __P2_TILE_SIZE;
y = floor(y / __P2_TILE_SIZE) * __P2_TILE_SIZE;

var _movement_finish_x = 0, _movement_finish_y = 0;
for (var i = array_length_1d(movement_pattern_x) - 1; i &gt;= 0; i--) {
    _movement_finish_x += movement_pattern_x[i];
    _movement_finish_y += movement_pattern_y[i];
}
var _average_movement_distance = point_distance(0, 0, _movement_finish_x, _movement_finish_y) / array_length_1d(movement_pattern_x);

var _width = 0, _height = 0, _mov_pat_ind = 0;
for (var i = corruption_length - 1; i &gt;= 0; i--) {
    _width += movement_pattern_x[_mov_pat_ind];
    _height += movement_pattern_y[_mov_pat_ind];
    _mov_pat_ind = (_mov_pat_ind + 1) % array_length_1d(movement_pattern_x);
}

var _ts05 = __P2_TILE_SIZE / 2;
visual_instance = instance_create(x + _ts05 - _width * _ts05, y + _ts05 - _height * _ts05, objP2CorruptionSlugVisualized);
visual_instance.direction = point_direction(0, 0, _movement_finish_x, _movement_finish_y);
visual_instance.image_angle = visual_instance.direction;
if (movement_interval != 0.0) {
    visual_instance.speed = (_average_movement_distance * __P2_TILE_SIZE) / (movement_interval * 50.0);
} else {
    visual_instance.speed = 0;
}
instance_set_width(visual_instance, point_distance(0, 0, _width, _height) * 32 + 64);
instance_set_height(visual_instance, 96);

visual_instance.wiggle_frequency = 0.6 + point_distance(0, 0, _width, _height) / 4 * 0.35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!persistent) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug draw
/*
var _x = x, _y = y, _mi = movement_index;
draw_set_color(c_red);
for (var i = 0; i &lt; corruption_length; i++) {
    draw_rectangle(_x, _y, _x + __P2_TILE_SIZE, _y + __P2_TILE_SIZE, true);
    
    _mi--;
    if (_mi &lt; 0) {
        _mi += movement_pattern_length;
    }
    
    _x -= movement_pattern_x[_mi] * __P2_TILE_SIZE;
    _y -= movement_pattern_y[_mi] * __P2_TILE_SIZE;
}
draw_set_color(c_white);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// don't draw

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
