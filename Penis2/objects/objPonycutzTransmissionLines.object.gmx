<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1000;

sh = shP2Skyline;
time = 0;
amplitude = 0.3; // 0.8
offset = -310.0;
opacity_add = 0.0; // 0.0 - 1.7
saturation = 0.0; // 0.75
glow_opacity = 0.05; // 0.1 - 0.2
hue_range_start = random(1);
hue_range_add = random_range(0.15, 0.35);

// sorry this is garbage programming but idc lol
music_transitioning_prev = false;
saturation_prev = 0.0;
hue_tween_1 = -1;
hue_tween_2 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _change_color = false;

with (objPonycutzGrave)
{
    other.opacity_add = lerp(0.0, 1.7, volume);
    other.saturation = lerp(0.0, 1, volume);
    other.amplitude = lerp(0.3, 0.8, volume);
    other.glow_opacity = lerp(0.05, 0.2, volume);
    
    _change_color |= (!other.music_transitioning_prev &amp;&amp; transitioning);
    other.music_transitioning_prev = transitioning;
}

_change_color |= (saturation == 0.0 &amp;&amp; saturation != saturation_prev);
saturation_prev = saturation;

if (_change_color) {
    if (TweenExists(hue_tween_1))
        TweenDestroySafe(hue_tween_1);
    if (TweenExists(hue_tween_2))
        TweenDestroySafe(hue_tween_2);
    
    hue_tween_1 = TweenFire(other.id, EaseInOutCirc, TWEEN_MODE_ONCE, true, 0.0, 3.0, "hue_range_start", hue_range_start, random(1));
    hue_tween_2 = TweenFire(other.id, EaseInOutCirc, TWEEN_MODE_ONCE, true, 0.0, 3.0, "hue_range_add", hue_range_add, random_range(0.15, 0.35));
}

time += 1.0/50.0;
x = view_xview[0];
y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_set_width(id, view_wview[0]);
instance_set_height(id, view_hview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(sh);
shader_set_uniform_f(shader_get_uniform(sh, "amplitude"), amplitude);
shader_set_uniform_f(shader_get_uniform(sh, "offset"), offset);
shader_set_uniform_f(shader_get_uniform(sh, "time"), time);
shader_set_uniform_f(shader_get_uniform(sh, "opacity_add"), opacity_add);
shader_set_uniform_f(shader_get_uniform(sh, "saturation"), saturation);
shader_set_uniform_f(shader_get_uniform(sh, "hue_range"), hue_range_start, hue_range_add);
shader_set_uniform_f(shader_get_uniform(sh, "glow_opacity"), glow_opacity);
draw_self();
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
