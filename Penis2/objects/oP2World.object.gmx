<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (instance_number(object_index) &gt; 1) {
    instance_destroy(id, false);
    exit;
}

debug = false;
always_refresh_p2_data = false;
show_debug_grid = false;
show_debug_solids = false;

if (always_refresh_p2_data &amp;&amp; file_exists(scrP2SaveDataGetName())) {
    file_delete(scrP2SaveDataGetName());
}

inspector_instance = noone;
if (global.debugMode &amp;&amp; debug) {
    //inspector_instance = instance_create(0, 0, objDebugInspectorControl);
}

previous_room_x = 0;
previous_room_y = 0;
backbuffer = -1;
room_restarting = false;
data_initialized = false;

corruption_slug_visual_manager = instance_create(0, 0, objP2CorruptionSlugVisualManager);
hud_instance = instance_create(0, 0, oP2Hud);

world_room_list = ds_list_create();
ds_list_add(world_room_list, rP2FinalizeDataCollection);
gameplay_room_list = ds_list_create();
// top layer
ds_list_add(gameplay_room_list, rP2Nuclear, rP2IntroPonycutz, rP2FapMyBeloved, rP2Wasteland, rP2Edge_0, rP2Edge_1, rP2Edge_2);
// middle layer
ds_list_add(gameplay_room_list, rP2WrenchTutorial, rP2Intro01, rP2Intro02, rP2Intro03, rP2Intro04, rP2Intro05, rP2Intro06, rP2Intro07, rP2Tree);
// bottom layer
ds_list_add(gameplay_room_list, rP2NoEscape, rP2IntroOOB_FarLeft, rP2IntroFall, rP2IntroOOB_BottomMiddle_0, rP2IntroOOB_BottomMiddle_1, rP2IntroOOB_BottomMiddle_2, rP2IntroOOB_BottomRight, rP2Intro08);
// other
ds_list_add(gameplay_room_list, rP2Between, rP2ForestHallucination, rP2ForestHallucination_Autumn, rP2ForestHallucination_Winter, rP2EdgePit_1, rP2EdgePit_2, rP2ForestFinal, rP2SlugTilingTest_0, rP2SlugTilingTest_1, rP2SlugTilingTest_2);

oob_room_list = ds_list_create();
ds_list_add(oob_room_list,
    rP2Wasteland, rP2Edge_0, rP2Edge_1, rP2Edge_2, rP2EdgePit_1, rP2EdgePit_2, rP2IntroFall, rP2IntroOOB_FarLeft, rP2IntroOOB_BottomMiddle_0, rP2IntroOOB_BottomMiddle_1,
    rP2IntroOOB_BottomMiddle_2, rP2IntroOOB_BottomRight, rP2SlugTilingTest_0, rP2SlugTilingTest_1, rP2SlugTilingTest_2, rP2Tree);


scrP2WorldCollectData(true);
global.edgeDeath = false;


enum P2_TILING_BITS {
    TOP_LEFT =      1,
    TOP =           1 &lt;&lt; 1,
    TOP_RIGHT =     1 &lt;&lt; 2,
    LEFT =          1 &lt;&lt; 3,
    MIDDLE =        1 &lt;&lt; 4,
    RIGHT =         1 &lt;&lt; 5,
    BOTTOM_LEFT =   1 &lt;&lt; 6,
    BOTTOM =        1 &lt;&lt; 7,
    BOTTOM_RIGHT =  1 &lt;&lt; 8,
    __MAX = 511}
enum P2_TILING_BIT_POSITIONS {TOP_LEFT, TOP, TOP_RIGHT, LEFT, MIDDLE, RIGHT, BOTTOM_LEFT, BOTTOM, BOTTOM_RIGHT}
pipe_47_tileset = ds_list_create();
pipe_47_tileset[|511] = -1;
for (var i = 511; i &gt;= 0; i--) {
    pipe_47_tileset[|i] = undefined;
}

scrP2Tileset3x3AddTile(pipe_47_tileset, 0, 0, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT, 32, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_RIGHT, 32 * 2, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.TOP_RIGHT, 32 * 3, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.BOTTOM_RIGHT, 32 * 4, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 5, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 6, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 7, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.BOTTOM_LEFT, 32 * 8, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 9, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 10, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 11, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.BOTTOM_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 12, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.BOTTOM_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 13, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 14, 0);
scrP2Tileset3x3AddTile(pipe_47_tileset, P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 15, 0);

var _left_wall = P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.LEFT | P2_TILING_BITS.BOTTOM_LEFT;
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall, 0, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | P2_TILING_BITS.TOP_RIGHT, 32, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 2, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 3, 32);

var _top_wall = P2_TILING_BITS.TOP_LEFT | P2_TILING_BITS.TOP | P2_TILING_BITS.TOP_RIGHT;
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall, 32 * 4, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 5, 32); 
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | P2_TILING_BITS.BOTTOM_LEFT, 32 * 6, 32); 
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | P2_TILING_BITS.BOTTOM_RIGHT | P2_TILING_BITS.BOTTOM_LEFT, 32 * 7, 32);

var _right_wall = P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.RIGHT | P2_TILING_BITS.BOTTOM_RIGHT;
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall, 32 * 8, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | P2_TILING_BITS.BOTTOM_LEFT, 32 * 9, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | P2_TILING_BITS.TOP_LEFT, 32 * 10, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | P2_TILING_BITS.BOTTOM_LEFT | P2_TILING_BITS.TOP_LEFT, 32 * 11, 32);

var _bottom_wall = P2_TILING_BITS.BOTTOM_LEFT | P2_TILING_BITS.BOTTOM | P2_TILING_BITS.BOTTOM_RIGHT;
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall, 32 * 12, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | P2_TILING_BITS.TOP_RIGHT, 32 * 13, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | P2_TILING_BITS.TOP_LEFT, 32 * 14, 32);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | P2_TILING_BITS.TOP_RIGHT | P2_TILING_BITS.TOP_LEFT, 32 * 15, 32);

scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | _right_wall, 0, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | _bottom_wall, 32, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | _top_wall, 32 * 2, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | _top_wall | P2_TILING_BITS.BOTTOM_RIGHT, 32 * 3, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | _right_wall, 32 * 4, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | _right_wall | P2_TILING_BITS.BOTTOM_LEFT, 32 * 5, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | _bottom_wall, 32 * 6, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | _bottom_wall | P2_TILING_BITS.TOP_LEFT, 32 * 7, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | _left_wall, 32 * 8, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | _left_wall | P2_TILING_BITS.TOP_RIGHT, 32 * 9, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | _top_wall | _right_wall, 32 * 10, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _bottom_wall | _left_wall | _top_wall, 32 * 11, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _right_wall | _bottom_wall | _left_wall, 32 * 12, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _top_wall | _right_wall | _bottom_wall, 32 * 13, 64);
scrP2Tileset3x3AddTile(pipe_47_tileset, _left_wall | _top_wall | _right_wall | _bottom_wall, 32 * 14, 64);


forest_leaf_sys = part_system_create();
part_system_depth(forest_leaf_sys, -100);
forest_leaf_part = part_type_create();
part_type_sprite(forest_leaf_part, sprP2LeafParticle, false, true, true);
part_type_color2(forest_leaf_part, c_white, 9020129);
part_type_alpha3(forest_leaf_part, 1, 1, 0);
part_type_life(forest_leaf_part, 30, 45);
part_type_size(forest_leaf_part, 1, 1, -0.01, 0);
part_type_speed(forest_leaf_part, 1, 1.5, -0.002, 0);
part_type_direction(forest_leaf_part, 0, 360, -0.26, 0);
part_type_orientation(forest_leaf_part, 0, 360, -1, 0, false);
part_type_gravity(forest_leaf_part, 0, 270);
part_type_blend(forest_leaf_part, false);

forest_leaf_part_yellow = part_type_create();
part_type_sprite(forest_leaf_part_yellow, sprP2LeafParticle_Yellow, false, true, true);
part_type_color2(forest_leaf_part_yellow, c_white, 9020128);
part_type_alpha3(forest_leaf_part_yellow, 1, 1, 0);
part_type_life(forest_leaf_part_yellow, 30, 45);
part_type_size(forest_leaf_part_yellow, 1, 1, -0.01, 0);
part_type_speed(forest_leaf_part_yellow, 1, 1.5, -0.002, 0);
part_type_direction(forest_leaf_part_yellow, 0, 360, -0.26, 0);
part_type_orientation(forest_leaf_part_yellow, 0, 360, -1, 0, false);
part_type_gravity(forest_leaf_part_yellow, 0, 270);
part_type_blend(forest_leaf_part_yellow, false);

forest_leaf_part_white = part_type_create();
part_type_sprite(forest_leaf_part_white, sprP2LeafParticle_White, false, true, true);
part_type_color2(forest_leaf_part_white, c_white, 9020127);
part_type_alpha3(forest_leaf_part_white, 1, 1, 0);
part_type_life(forest_leaf_part_white, 30, 45);
part_type_size(forest_leaf_part_white, 1, 1, -0.01, 0);
part_type_speed(forest_leaf_part_white, 1, 1.5, -0.002, 0);
part_type_direction(forest_leaf_part_white, 0, 360, -0.26, 0);
part_type_orientation(forest_leaf_part_white, 0, 360, -1, 0, false);
part_type_gravity(forest_leaf_part_white, 0, 270);
part_type_blend(forest_leaf_part_white, false);

forest_tiles = ds_list_create();
forest_tile_pool = ds_list_create();
forest_tile_pool_index = 0;
for (var i = 0; i &lt; 3000; i++) {
    var _t = ds_map_create();
    _t[?"bg"] = -1;
    _t[?"x"] = -1;
    _t[?"y"] = -1;
    _t[?"left"] = -1;
    _t[?"top"] = -1;
    ds_list_add_map(forest_tile_pool, _t);
}

forest_instances = ds_list_create();
forest_instance_pool = ds_list_create();
forest_instance_pool_index = 0;
for (var i = 0; i &lt; 3000; i++) {
    var _inst = ds_map_create();
    _inst[?"x"] = -1;
    _inst[?"y"] = -1;
    _inst[?"obj"] = -1;
    ds_list_add_map(forest_instance_pool, _inst);
}
forest_trees = ds_list_create();
var _tree, _tree_data;

_tree = ds_grid_create(7, 8);
_tree[#0,0] = 0; _tree[#1,0] = 0; _tree[#2,0] = 0; _tree[#3,0] = 2; _tree[#4,0] = 2; _tree[#5,0] = 2; _tree[#6,0] = 0;
_tree[#0,1] = 0; _tree[#1,1] = 2; _tree[#2,1] = 2; _tree[#3,1] = 2; _tree[#4,1] = 2; _tree[#5,1] = 2; _tree[#6,1] = 2;
_tree[#0,2] = 2; _tree[#1,2] = 2; _tree[#2,2] = 2; _tree[#3,2] = 2; _tree[#4,2] = 2; _tree[#5,2] = 3; _tree[#6,2] = 2;
_tree[#0,3] = 2; _tree[#1,3] = 3; _tree[#2,3] = 2; _tree[#3,3] = 2; _tree[#4,3] = 3; _tree[#5,3] = 2; _tree[#6,3] = 2;
_tree[#0,4] = 2; _tree[#1,4] = 2; _tree[#2,4] = 3; _tree[#3,4] = 2; _tree[#4,4] = 2; _tree[#5,4] = 2; _tree[#6,4] = 0;
_tree[#0,5] = 0; _tree[#1,5] = 2; _tree[#2,5] = 2; _tree[#3,5] = 2; _tree[#4,5] = 1; _tree[#5,5] = 0; _tree[#6,5] = 0;
_tree[#0,6] = 0; _tree[#1,6] = 0; _tree[#2,6] = 0; _tree[#3,6] = 1; _tree[#4,6] = 0; _tree[#5,6] = 0; _tree[#6,6] = 0;
_tree[#0,7] = 0; _tree[#1,7] = 0; _tree[#2,7] = 0; _tree[#3,7] = 1; _tree[#4,7] = 0; _tree[#5,7] = 0; _tree[#6,7] = 0;
_tree_data = ds_map_create();
_tree_data[?"structure"] = _tree;
_tree_data[?"xorigin"] = 3;
_tree_data[?"yorigin"] = 8;
ds_list_add_map(forest_trees, _tree_data);

_tree = ds_grid_create(8, 9);
_tree[#0,0] = 0; _tree[#1,0] = 0; _tree[#2,0] = 0; _tree[#3,0] = 0; _tree[#4,0] = 2; _tree[#5,0] = 2; _tree[#6,0] = 2; _tree[#7,0] = 0;
_tree[#0,1] = 0; _tree[#1,1] = 2; _tree[#2,1] = 2; _tree[#3,1] = 2; _tree[#4,1] = 2; _tree[#5,1] = 2; _tree[#6,1] = 2; _tree[#7,1] = 2;
_tree[#0,2] = 2; _tree[#1,2] = 2; _tree[#2,2] = 3; _tree[#3,2] = 2; _tree[#4,2] = 2; _tree[#5,2] = 3; _tree[#6,2] = 2; _tree[#7,2] = 2;
_tree[#0,3] = 2; _tree[#1,3] = 3; _tree[#2,3] = 2; _tree[#3,3] = 2; _tree[#4,3] = 3; _tree[#5,3] = 2; _tree[#6,3] = 2; _tree[#7,3] = 2;
_tree[#0,4] = 2; _tree[#1,4] = 2; _tree[#2,4] = 2; _tree[#3,4] = 2; _tree[#4,4] = 2; _tree[#5,4] = 2; _tree[#6,4] = 2; _tree[#7,4] = 0;
_tree[#0,5] = 2; _tree[#1,5] = 2; _tree[#2,5] = 3; _tree[#3,5] = 2; _tree[#4,5] = 3; _tree[#5,5] = 2; _tree[#6,5] = 0; _tree[#7,5] = 0;
_tree[#0,6] = 0; _tree[#1,6] = 2; _tree[#2,6] = 3; _tree[#3,6] = 2; _tree[#4,6] = 2; _tree[#5,6] = 0; _tree[#6,6] = 0; _tree[#7,6] = 0;
_tree[#0,7] = 0; _tree[#1,7] = 0; _tree[#2,7] = 0; _tree[#3,7] = 1; _tree[#4,7] = 0; _tree[#5,7] = 0; _tree[#6,7] = 0; _tree[#7,7] = 0;
_tree[#0,8] = 0; _tree[#1,8] = 0; _tree[#2,8] = 0; _tree[#3,8] = 1; _tree[#4,8] = 0; _tree[#5,8] = 0; _tree[#6,8] = 0; _tree[#7,8] = 0;
_tree_data = ds_map_create();
_tree_data[?"structure"] = _tree;
_tree_data[?"xorigin"] = 3;
_tree_data[?"yorigin"] = 9;
ds_list_add_map(forest_trees, _tree_data);

_tree = ds_grid_create(6, 6);
_tree[#0,0] = 0; _tree[#1,0] = 0; _tree[#2,0] = 0; _tree[#3,0] = 2; _tree[#4,0] = 2; _tree[#5,0] = 0;
_tree[#0,1] = 0; _tree[#1,1] = 2; _tree[#2,1] = 2; _tree[#3,1] = 2; _tree[#4,1] = 2; _tree[#5,1] = 2;
_tree[#0,2] = 2; _tree[#1,2] = 2; _tree[#2,2] = 2; _tree[#3,2] = 2; _tree[#4,2] = 3; _tree[#5,2] = 2;
_tree[#0,3] = 2; _tree[#1,3] = 3; _tree[#2,3] = 2; _tree[#3,3] = 3; _tree[#4,3] = 2; _tree[#5,3] = 0;
_tree[#0,4] = 0; _tree[#1,4] = 2; _tree[#2,4] = 1; _tree[#3,4] = 2; _tree[#4,4] = 0; _tree[#5,4] = 0;
_tree[#0,5] = 0; _tree[#1,5] = 0; _tree[#2,5] = 2; _tree[#3,5] = 0; _tree[#4,5] = 0; _tree[#5,5] = 0;
_tree_data = ds_map_create();
_tree_data[?"structure"] = _tree;
_tree_data[?"xorigin"] = 2;
_tree_data[?"yorigin"] = 6;
ds_list_add_map(forest_trees, _tree_data);

_tree = ds_grid_create(7, 8);
_tree[#0,0] = 0; _tree[#1,0] = 2; _tree[#2,0] = 2; _tree[#3,0] = 2; _tree[#4,0] = 0; _tree[#5,0] = 0; _tree[#6,0] = 0;
_tree[#0,1] = 2; _tree[#1,1] = 2; _tree[#2,1] = 2; _tree[#3,1] = 2; _tree[#4,1] = 2; _tree[#5,1] = 2; _tree[#6,1] = 0;
_tree[#0,2] = 2; _tree[#1,2] = 3; _tree[#2,2] = 2; _tree[#3,2] = 2; _tree[#4,2] = 3; _tree[#5,2] = 2; _tree[#6,2] = 2;
_tree[#0,3] = 2; _tree[#1,3] = 2; _tree[#2,3] = 3; _tree[#3,3] = 2; _tree[#4,3] = 2; _tree[#5,3] = 3; _tree[#6,3] = 2;
_tree[#0,4] = 0; _tree[#1,4] = 2; _tree[#2,4] = 2; _tree[#3,4] = 2; _tree[#4,4] = 2; _tree[#5,4] = 2; _tree[#6,4] = 0;
_tree[#0,5] = 0; _tree[#1,5] = 0; _tree[#2,5] = 2; _tree[#3,5] = 1; _tree[#4,5] = 2; _tree[#5,5] = 0; _tree[#6,5] = 0;
_tree[#0,6] = 0; _tree[#1,6] = 0; _tree[#2,6] = 0; _tree[#3,6] = 1; _tree[#4,6] = 0; _tree[#5,6] = 0; _tree[#6,6] = 0;
_tree[#0,7] = 0; _tree[#1,7] = 0; _tree[#2,7] = 0; _tree[#3,7] = 1; _tree[#4,7] = 0; _tree[#5,7] = 0; _tree[#6,7] = 0;
_tree_data = ds_map_create();
_tree_data[?"structure"] = _tree;
_tree_data[?"xorigin"] = 3;
_tree_data[?"yorigin"] = 8;
ds_list_add_map(forest_trees, _tree_data);

eel_star_part = part_type_create();
part_type_sprite(eel_star_part, sprP2EelStarParticle, true, true, true);
part_type_alpha3(eel_star_part, 1, 1, 0);
part_type_life(eel_star_part, 400, 400);
part_type_size(eel_star_part, 1, 1, -0.0025, 0);
part_type_speed(eel_star_part, 0.01, 0.01, 0.0, 0.0);
part_type_direction(eel_star_part, 90, 90, 0, 0);
part_type_orientation(eel_star_part, 0, 0, 0, 0, false);
part_type_gravity(eel_star_part, 0, 0);
part_type_blend(eel_star_part, true);

eel_star_sys = part_system_create();
part_system_depth(eel_star_sys, -100);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrP2SaveData();

for (var i = 0, n = ds_list_size(forest_trees); i &lt; n; i++) {
    ds_grid_destroy(ds_map_find_value(ds_list_find_value(forest_trees, i), "structure"));
}
ds_list_destroy(forest_trees);

ds_list_destroy(world_room_list);
ds_list_destroy(gameplay_room_list);
ds_list_destroy(oob_room_list);
ds_list_destroy(forest_tiles);
ds_list_destroy(forest_tile_pool);
ds_list_destroy(forest_instances);
ds_list_destroy(forest_instance_pool);

if (ds_exists(global.__p2_room_tiles, ds_type_map))
    ds_map_destroy(global.__p2_room_tiles);
global.__p2_room_tiles = -1;

if (ds_exists(global.__p2_tilemap, ds_type_map))
    ds_grid_destroy(global.__p2_tilemap);
global.__p2_tilemap = -1;

global.edgeDeath = true;

if (instance_exists(corruption_slug_visual_manager))
    instance_destroy(corruption_slug_visual_manager);

if (instance_exists(hud_instance))
    instance_destroy(hud_instance);

if (instance_exists(inspector_instance))
    instance_destroy(inspector_instance);

if (surface_exists(backbuffer))
    surface_free(backbuffer);

part_type_destroy(forest_leaf_part);
part_type_destroy(forest_leaf_part_yellow);
part_type_destroy(forest_leaf_part_white);
part_type_destroy(eel_star_part);
part_system_destroy(forest_leaf_sys);

ds_list_destroy(pipe_47_tileset);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restarting = false;
previous_room_x = global.__p2_current_room_x;
previous_room_y = global.__p2_current_room_y;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var roomCaption = "I Wanna be the P□□□□ 2";

if (global.gameStarted)
{
    roomCaption += " -"
    roomCaption += " Deaths: " + string(global.death);
    roomCaption += " Time: ";
    
    var t = floor(global.time);
    
    roomCaption += string(t div 3600) + ":";
    t = t mod 3600;
    roomCaption += string(t div 600);
    t = t mod 600;
    roomCaption += string(t div 60) + ":";
    t = t mod 60;
    roomCaption += string(t div 10);
    t = t mod 10;
    roomCaption += string(t);
}

window_set_caption(roomCaption);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrButtonCheckPressed(global.restartButton)) {
    room_restarting = true;
}

if (debug) {
    if (keyboard_check_pressed(vk_space)) {
        var
        _tx = floor(mouse_x / 32),
        _ty = floor(mouse_y / 32),
        _td = scrP2TilemapGetInRoom(_tx, _ty),
        
        if (_td != -1) {
            var _prev_tile_type = scrP2MainTilesetGetTileType(_td[?"tile_index"]);
            _td[?"tile_index"] = ((_td[?"tile_index"] - 4 + 4) % (20 - 4)) + 4;
            var _tile_type = scrP2MainTilesetGetTileType(_td[?"tile_index"]);
            scrP2TileRoomUpdateAt(_tx, _ty, pipe_47_tileset);
            
            if (_prev_tile_type == P2_TILE_TYPE.HORIZONTAL) {
                scrP2TileRoomUpdateAt(_tx + 1, _ty, pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx - 1, _ty, pipe_47_tileset);
            } else if (_prev_tile_type == P2_TILE_TYPE.VERTICAL) {
                scrP2TileRoomUpdateAt(_tx, _ty + 1, pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx, _ty - 1, pipe_47_tileset);
            }
            
            if (_tile_type == P2_TILE_TYPE.HORIZONTAL) {
                scrP2TileRoomUpdateAt(_tx + 1, _ty, pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx - 1, _ty, pipe_47_tileset);
            } else if (_tile_type == P2_TILE_TYPE.VERTICAL) {
                scrP2TileRoomUpdateAt(_tx, _ty + 1, pipe_47_tileset);
                scrP2TileRoomUpdateAt(_tx, _ty - 1, pipe_47_tileset);
            }
        }
    }
    
    if (keyboard_check_pressed(ord("G"))) {
        show_debug_grid = !show_debug_grid;
    }
    
    if (keyboard_check_pressed(ord("S"))) {
        show_debug_solids = !show_debug_solids;
    }
    
    if (keyboard_check_pressed(ord("H"))) {
        with (oP2Hud) {
            visible = !visible;
        }
        with (objPlayer) {
            visible = oP2Hud.visible;
        }
    }
    
    with (objBlock) {
        if (object_index == objBlock) {
            visible = other.show_debug_solids;
            depth = -5000000;
        }
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_clear(eel_star_sys);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>data_initialized = !instance_exists(oP2DataCollector);

alarm[0] = 1;

var _room_valid = false;

for (var i = 0, n = ds_list_size(world_room_list); i &lt; n; i++)
    _room_valid |= world_room_list[|i] == room;
for (var i = 0, n = ds_list_size(gameplay_room_list); i &lt; n; i++)
    _room_valid |= gameplay_room_list[|i] == room;

if (!_room_valid) {
    instance_destroy();
    exit;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_f11)) {
    screen_save("x" + string(global.__p2_current_room_x) + "y" + string(global.__p2_current_room_y) + ".png");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (show_debug_grid) {
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    var _ts = __P2_TILE_SIZE;
    
    for (var xx = abs(view_xview[0]) % _ts; xx &lt; view_wview[0]; xx += _ts) {
        draw_line(xx, 0, xx, view_hview[0]);
    }
    
    for (var yy = abs(view_yview[0]) % _ts; yy &lt; view_hview[0]; yy += _ts) {
        draw_line(0, yy, view_wview[0], yy);
    }
    
    draw_set_alpha(1.0);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(backbuffer)) {
    backbuffer = surface_create(view_wview[0], view_hview[0]);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
