<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprP2Monolith</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code
crystal_index = P2_CRYSTAL.PURPLE;

// shader
sh = shP2MonolithCrumble;
noise_uvs = sprite_get_uvs(sprP2MonolithNoiseTexture, 0);
noise_texture = sprite_get_texture(sprP2MonolithNoiseTexture, 0);
sh_crumble_factor = 0.0;
sh_crumble_factor_final = 0.95;
sh_crack_factor = 0.0;
sh_stain_factor = 0.0;
crumbling = false;
crumbling_snd = noone;

// ball
ball_instance = instance_create(x + 46, y + 94, objP2MonolithBall);
ball_instance.depth = depth - 2;
ball_instance.effect_done_callback_user_event = 0;
ball_instance.effect_done_callback_instance = id;

// pattern blend
pattern_blend_sprite = sprP2MonolithPatterns;
pattern_blend_alpha = 0.0;
pattern_blend_tween = TweenFire(id, EaseInOutCubic, TWEEN_MODE_PATROL, true, 0.0, 1.0, "pattern_blend_alpha", 0.0, 1.0);

// particles
// NOTE: this is generated gml for hardcoded particle positions
pos_x[166]=83;pos_y[166]=157;order_val[166]=0.98125;pos_x[165]=69;pos_y[165]=157;order_val[165]=0.98125;pos_x[164]=84;pos_y[164]=156;order_val[164]=0.975;pos_x[163]=64;pos_y[163]=156;order_val[163]=0.975;pos_x[162]=26;pos_y[162]=156;order_val[162]=0.975;pos_x[161]=48;pos_y[161]=155;order_val[161]=0.96875;pos_x[160]=32;pos_y[160]=155;order_val[160]=0.96875;pos_x[159]=9;pos_y[159]=155;order_val[159]=0.96875;pos_x[158]=43;pos_y[158]=153;order_val[158]=0.95625;pos_x[157]=37;pos_y[157]=153;order_val[157]=0.95625;pos_x[156]=57;pos_y[156]=152;order_val[156]=0.95;pos_x[155]=21;pos_y[155]=151;order_val[155]=0.94375;pos_x[154]=15;pos_y[154]=151;order_val[154]=0.94375;pos_x[153]=76;pos_y[153]=150;order_val[153]=0.9375;pos_x[152]=9;pos_y[152]=147;order_val[152]=0.91875;pos_x[151]=61;pos_y[151]=147;order_val[151]=0.91875;pos_x[150]=86;pos_y[150]=146;order_val[150]=0.9125;pos_x[149]=52;pos_y[149]=146;order_val[149]=0.9125;pos_x[148]=66;pos_y[148]=145;order_val[148]=0.90625;pos_x[147]=33;pos_y[147]=145;order_val[147]=0.90625;pos_x[146]=72;pos_y[146]=143;order_val[146]=0.89375;pos_x[145]=43;pos_y[145]=143;order_val[145]=0.89375;pos_x[144]=27;pos_y[144]=143;order_val[144]=0.89375;pos_x[143]=14;pos_y[143]=142;order_val[143]=0.8875;pos_x[142]=21;pos_y[142]=142;order_val[142]=0.8875;pos_x[141]=38;pos_y[141]=140;order_val[141]=0.875;pos_x[140]=55;pos_y[140]=140;order_val[140]=0.875;pos_x[139]=80;pos_y[139]=140;order_val[139]=0.875;pos_x[138]=81;pos_y[138]=139;order_val[138]=0.86875;pos_x[137]=53;pos_y[137]=138;order_val[137]=0.8625;pos_x[136]=56;pos_y[136]=136;order_val[136]=0.85;pos_x[135]=75;pos_y[135]=135;order_val[135]=0.84375;pos_x[134]=19;pos_y[134]=135;order_val[134]=0.84375;pos_x[133]=43;pos_y[133]=135;order_val[133]=0.84375;pos_x[132]=25;pos_y[132]=135;order_val[132]=0.84375;pos_x[131]=31;pos_y[131]=134;order_val[131]=0.8375;pos_x[130]=63;pos_y[130]=133;order_val[130]=0.83125;pos_x[129]=15;pos_y[129]=131;order_val[129]=0.81875;pos_x[128]=37;pos_y[128]=131;order_val[128]=0.81875;pos_x[127]=70;pos_y[127]=130;order_val[127]=0.8125;pos_x[126]=87;pos_y[126]=130;order_val[126]=0.8125;pos_x[125]=88;pos_y[125]=129;order_val[125]=0.80625;pos_x[124]=69;pos_y[124]=128;order_val[124]=0.8;pos_x[123]=9;pos_y[123]=128;order_val[123]=0.8;pos_x[122]=75;pos_y[122]=127;order_val[122]=0.79375;pos_x[121]=60;pos_y[121]=126;order_val[121]=0.7875;pos_x[120]=48;pos_y[120]=126;order_val[120]=0.7875;pos_x[119]=28;pos_y[119]=126;order_val[119]=0.7875;pos_x[118]=58;pos_y[118]=125;order_val[118]=0.78125;pos_x[117]=21;pos_y[117]=125;order_val[117]=0.78125;pos_x[116]=44;pos_y[116]=123;order_val[116]=0.76875;pos_x[115]=80;pos_y[115]=121;order_val[115]=0.75625;pos_x[114]=13;pos_y[114]=121;order_val[114]=0.75625;pos_x[113]=35;pos_y[113]=120;order_val[113]=0.75;pos_x[112]=36;pos_y[112]=120;order_val[112]=0.75;pos_x[111]=36;pos_y[111]=119;order_val[111]=0.74375;pos_x[110]=85;pos_y[110]=117;order_val[110]=0.73125;pos_x[109]=67;pos_y[109]=117;order_val[109]=0.73125;pos_x[108]=47;pos_y[108]=117;order_val[108]=0.73125;pos_x[107]=49;pos_y[107]=117;order_val[107]=0.73125;pos_x[106]=54;pos_y[106]=116;order_val[106]=0.725;pos_x[105]=25;pos_y[105]=115;order_val[105]=0.71875;pos_x[104]=61;pos_y[104]=115;order_val[104]=0.71875;pos_x[103]=74;pos_y[103]=115;order_val[103]=0.71875;pos_x[102]=19;pos_y[102]=114;order_val[102]=0.7125;pos_x[101]=30;pos_y[101]=113;order_val[101]=0.70625;pos_x[100]=81;pos_y[100]=113;order_val[100]=0.70625;pos_x[99]=14;pos_y[99]=113;order_val[99]=0.70625;pos_x[98]=8;pos_y[98]=113;order_val[98]=0.70625;pos_x[97]=86;pos_y[97]=106;order_val[97]=0.6625;pos_x[96]=81;pos_y[96]=106;order_val[96]=0.6625;pos_x[95]=19;pos_y[95]=106;order_val[95]=0.6625;pos_x[94]=69;pos_y[94]=106;order_val[94]=0.6625;pos_x[93]=27;pos_y[93]=105;order_val[93]=0.65625;pos_x[92]=58;pos_y[92]=105;order_val[92]=0.65625;pos_x[91]=33;pos_y[91]=104;order_val[91]=0.65;pos_x[90]=75;pos_y[90]=103;order_val[90]=0.64375;pos_x[89]=14;pos_y[89]=101;order_val[89]=0.63125;pos_x[88]=64;pos_y[88]=100;order_val[88]=0.625;pos_x[87]=9;pos_y[87]=97;order_val[87]=0.60625;pos_x[86]=20;pos_y[86]=96;order_val[86]=0.6;pos_x[85]=27;pos_y[85]=95;order_val[85]=0.59375;pos_x[84]=13;pos_y[84]=93;order_val[84]=0.58125;pos_x[83]=75;pos_y[83]=92;order_val[83]=0.575;pos_x[82]=82;pos_y[82]=91;order_val[82]=0.56875;pos_x[81]=69;pos_y[81]=90;order_val[81]=0.5625;pos_x[80]=69;pos_y[80]=88;order_val[80]=0.55;pos_x[79]=27;pos_y[79]=86;order_val[79]=0.5375;pos_x[78]=21;pos_y[78]=85;order_val[78]=0.53125;pos_x[77]=13;pos_y[77]=85;order_val[77]=0.53125;pos_x[76]=9;pos_y[76]=85;order_val[76]=0.53125;pos_x[75]=32;pos_y[75]=82;order_val[75]=0.5125;pos_x[74]=81;pos_y[74]=81;order_val[74]=0.50625;pos_x[73]=75;pos_y[73]=81;order_val[73]=0.50625;pos_x[72]=60;pos_y[72]=80;order_val[72]=0.5;pos_x[71]=60;pos_y[71]=79;order_val[71]=0.49375;pos_x[70]=18;pos_y[70]=78;order_val[70]=0.4875;pos_x[69]=16;pos_y[69]=77;order_val[69]=0.48125;pos_x[68]=9;pos_y[68]=75;order_val[68]=0.46875;pos_x[67]=80;pos_y[67]=75;order_val[67]=0.46875;pos_x[66]=40;pos_y[66]=75;order_val[66]=0.46875;pos_x[65]=45;pos_y[65]=75;order_val[65]=0.46875;pos_x[64]=66;pos_y[64]=75;order_val[64]=0.46875;pos_x[63]=50;pos_y[63]=73;order_val[63]=0.45625;pos_x[62]=34;pos_y[62]=73;order_val[62]=0.45625;pos_x[61]=25;pos_y[61]=73;order_val[61]=0.45625;pos_x[60]=75;pos_y[60]=71;order_val[60]=0.44375;pos_x[59]=57;pos_y[59]=70;order_val[59]=0.4375;pos_x[58]=56;pos_y[58]=69;order_val[58]=0.43125;pos_x[57]=83;pos_y[57]=67;order_val[57]=0.41875;pos_x[56]=14;pos_y[56]=66;order_val[56]=0.4125;pos_x[55]=69;pos_y[55]=66;order_val[55]=0.4125;pos_x[54]=44;pos_y[54]=66;order_val[54]=0.4125;pos_x[53]=19;pos_y[53]=65;order_val[53]=0.40625;pos_x[52]=27;pos_y[52]=65;order_val[52]=0.40625;pos_x[51]=52;pos_y[51]=63;order_val[51]=0.39375;pos_x[50]=31;pos_y[50]=62;order_val[50]=0.3875;pos_x[49]=74;pos_y[49]=62;order_val[49]=0.3875;pos_x[48]=9;pos_y[48]=62;order_val[48]=0.3875;pos_x[47]=36;pos_y[47]=60;order_val[47]=0.375;pos_x[46]=64;pos_y[46]=60;order_val[46]=0.375;pos_x[45]=64;pos_y[45]=59;order_val[45]=0.36875;pos_x[44]=36;pos_y[44]=59;order_val[44]=0.36875;pos_x[43]=16;pos_y[43]=56;order_val[43]=0.35;pos_x[42]=26;pos_y[42]=55;order_val[42]=0.34375;pos_x[41]=51;pos_y[41]=54;order_val[41]=0.3375;pos_x[40]=85;pos_y[40]=53;order_val[40]=0.33125;pos_x[39]=80;pos_y[39]=53;order_val[39]=0.33125;pos_x[38]=57;pos_y[38]=53;order_val[38]=0.33125;pos_x[37]=45;pos_y[37]=53;order_val[37]=0.33125;pos_x[36]=33;pos_y[36]=51;order_val[36]=0.31875;pos_x[35]=68;pos_y[35]=51;order_val[35]=0.31875;pos_x[34]=74;pos_y[34]=51;order_val[34]=0.31875;pos_x[33]=21;pos_y[33]=50;order_val[33]=0.3125;pos_x[32]=33;pos_y[32]=49;order_val[32]=0.30625;pos_x[31]=21;pos_y[31]=48;order_val[31]=0.3;pos_x[30]=14;pos_y[30]=46;order_val[30]=0.2875;pos_x[29]=38;pos_y[29]=46;order_val[29]=0.2875;pos_x[28]=47;pos_y[28]=46;order_val[28]=0.2875;pos_x[27]=49;pos_y[27]=45;order_val[27]=0.28125;pos_x[26]=80;pos_y[26]=44;order_val[26]=0.275;pos_x[25]=55;pos_y[25]=43;order_val[25]=0.26875;pos_x[24]=61;pos_y[24]=43;order_val[24]=0.26875;pos_x[23]=66;pos_y[23]=43;order_val[23]=0.26875;pos_x[22]=28;pos_y[22]=43;order_val[22]=0.26875;pos_x[21]=74;pos_y[21]=42;order_val[21]=0.2625;pos_x[20]=16;pos_y[20]=38;order_val[20]=0.2375;pos_x[19]=22;pos_y[19]=36;order_val[19]=0.225;pos_x[18]=52;pos_y[18]=35;order_val[18]=0.21875;pos_x[17]=72;pos_y[17]=34;order_val[17]=0.2125;pos_x[16]=81;pos_y[16]=33;order_val[16]=0.20625;pos_x[15]=59;pos_y[15]=33;order_val[15]=0.20625;pos_x[14]=42;pos_y[14]=33;order_val[14]=0.20625;pos_x[13]=41;pos_y[13]=33;order_val[13]=0.20625;pos_x[12]=84;pos_y[12]=31;order_val[12]=0.19375;pos_x[11]=30;pos_y[11]=31;order_val[11]=0.19375;pos_x[10]=29;pos_y[10]=31;order_val[10]=0.19375;pos_x[9]=65;pos_y[9]=30;order_val[9]=0.1875;pos_x[8]=66;pos_y[8]=30;order_val[8]=0.1875;pos_x[7]=66;pos_y[7]=29;order_val[7]=0.18125;pos_x[6]=49;pos_y[6]=29;order_val[6]=0.18125;pos_x[5]=64;pos_y[5]=28;order_val[5]=0.175;pos_x[4]=73;pos_y[4]=26;order_val[4]=0.1625;pos_x[3]=55;pos_y[3]=26;order_val[3]=0.1625;pos_x[2]=38;pos_y[2]=26;order_val[2]=0.1625;pos_x[1]=44;pos_y[1]=25;order_val[1]=0.15625;pos_x[0]=33;pos_y[0]=25;order_val[0]=0.15625;;
order_val_index = 0;
part_color_1 = make_color_rgb(128, 128, 128);
part_color_2 = make_color_rgb(64, 64, 64);

crumble_sys = part_system_create();
part_system_depth(crumble_sys, -2000000);

crumble_part = part_type_create();
part_type_sprite(crumble_part, sprP2MonolithCrumbleParticles, false, true, true);
part_type_alpha2(crumble_part, 1, 0.5);
part_type_life(crumble_part, 48, 131);
part_type_size(crumble_part, 1, 1, -0.01, 0);
part_type_speed(crumble_part, 2, 4.5, 0.1, 0);
part_type_direction(crumble_part, 130, 180, 0, 0);
part_type_orientation(crumble_part, 0, 0, 1, 0, false);
part_type_gravity(crumble_part, 0, 270);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(crumble_sys);
part_type_destroy(crumble_part);

if (audio_is_playing(crumbling_snd))
    audio_stop_sound(crumbling_snd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _cfac = sh_crumble_factor - 0.05;
while(order_val[order_val_index] &lt; _cfac &amp;&amp; order_val[order_val_index] &lt; sh_crumble_factor_final) {
    if (order_val_index + 1 &lt; array_length_1d(order_val)) {
        order_val_index++;
    } else {
        break;
    }
    
    var
    _val = order_val[order_val_index],
    _col = make_color_rgb(
        lerp(color_get_red(part_color_1), color_get_red(part_color_2), _val),
        lerp(color_get_green(part_color_1), color_get_green(part_color_2), _val),
        lerp(color_get_blue(part_color_1), color_get_blue(part_color_2), _val));
    
    part_particles_create_color(
        crumble_sys,
        x + pos_x[order_val_index],
        y + pos_y[order_val_index],
        crumble_part,
        _col,
        1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!crumbling) {
    TweenDestroySafe(pattern_blend_tween);
    //pattern_blend_tween = TweenFire(id, EaseOutCubic, 0, true, 0.0, 0.5, "pattern_blend_alpha", pattern_blend_alpha, 0.0);
    TweenFire(id, EaseLinear, 0, true, 1.0, 5.0, "sh_crumble_factor", 0.0, sh_crumble_factor_final);
    TweenFire(id, EaseLinear, 0, true, 0.0, 2.0, "sh_crack_factor", 0.0, 1.0);
    TweenFire(id, EaseLinear, 0, true, 0.0, 2.0, "sh_stain_factor", 0.0, 0.99);
    crumbling_snd = audio_play_sound(sndP2CrystalCracking, 0, false);
}

crumbling = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (int_get_bit(global.p2Crystal, crystal_index)) {
    crumbling = true;
    pattern_blend_alpha = 0.0;
    sh_crumble_factor = sh_crumble_factor_final;
    sh_crack_factor = 1.0;
    sh_stain_factor = 0.99;
    order_val_index = array_length_1d(order_val) - 1;
}

ball_instance.crystal_index = crystal_index;
with (ball_instance)
    event_user(15);

image_speed = 0;
image_index = crystal_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _uvs = sprite_get_uvs(sprite_index, image_index);
shader_set(sh);
shader_set_uniform_f(shader_get_uniform(sh, "noise_tl"), noise_uvs[0], noise_uvs[1]);
shader_set_uniform_f(shader_get_uniform(sh, "noise_br"), noise_uvs[2], noise_uvs[3]);
texture_set_stage(shader_get_sampler_index(sh, "noise_tex"), noise_texture);
shader_set_uniform_f(shader_get_uniform(sh, "tl"), _uvs[0], _uvs[1]);
shader_set_uniform_f(shader_get_uniform(sh, "br"), _uvs[2], _uvs[3]);
shader_set_uniform_f(shader_get_uniform(sh, "crumble_factor"), sh_crumble_factor);
shader_set_uniform_f(shader_get_uniform(sh, "crack_factor"), sh_crack_factor);
shader_set_uniform_f(shader_get_uniform(sh, "stain_factor"), sh_stain_factor);
draw_self();
shader_reset();

draw_set_blend_mode(bm_add);
draw_sprite_ext(pattern_blend_sprite, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, pattern_blend_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
